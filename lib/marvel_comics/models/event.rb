# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/27/2016

require 'date'
module MarvelComics
  class Event

    # The unique ID of the event resource.
    # @return [Integer]
    attr_accessor :id

    # The title of the event.
    # @return [String]
    attr_accessor :title

    # A description of the event.
    # @return [String]
    attr_accessor :description

    # The canonical URL identifier for this resource.
    # @return [String]
    attr_accessor :resource_uri

    # A set of public web site URLs for the event.
    # @return [List of UrlModel]
    attr_accessor :urls

    # The date the resource was most recently modified.
    # @return [DateTime]
    attr_accessor :modified

    # The date of publication of the first issue in this event.
    # @return [DateTime]
    attr_accessor :start

    # The date of publication of the last issue in this event.
    # @return [DateTime]
    attr_accessor :end

    # The representative image for this event.
    # @return [Thumbnail]
    attr_accessor :thumbnail

    # A resource list containing the comics in this event.
    # @return [ComicList]
    attr_accessor :comics

    # A resource list containing the stories in this event.
    # @return [StoryList]
    attr_accessor :stories

    # A resource list containing the series in this event.
    # @return [SeriesList]
    attr_accessor :series

    # A resource list containing the characters which appear in this event.
    # @return [CharacterList]
    attr_accessor :characters

    # A resource list containing creators whose work appears in this event.
    # @return [CreatorList]
    attr_accessor :creators

    # A summary representation of the event which follows this event.
    # @return [EventSummary]
    attr_accessor :next

    # A summary representation of the event which preceded this event.
    # @return [EventSummary]
    attr_accessor :previous

    def initialize(id = nil,
                   title = nil,
                   description = nil,
                   resource_uri = nil,
                   urls = nil,
                   modified = nil,
                   start = nil,
                   end = nil,
                   thumbnail = nil,
                   comics = nil,
                   stories = nil,
                   series = nil,
                   characters = nil,
                   creators = nil,
                   next = nil,
                   previous = nil)
      @id = id
      @title = title
      @description = description
      @resource_uri = resource_uri
      @urls = urls
      @modified = modified
      @start = start
      @end = end
      @thumbnail = thumbnail
      @comics = comics
      @stories = stories
      @series = series
      @characters = characters
      @creators = creators
      @next = next
      @previous = previous

    end

    def method_missing(method_name)
      puts "There is no method called '#{method_name}'."
    end

    # Creates JSON of the curent object
    def to_json(options = {})
      hash = key_map
      hash.to_json(options)
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        id = hash["id"]
        title = hash["title"]
        description = hash["description"]
        resource_uri = hash["resourceURI"]
        # Parameter is an array, so we need to iterate through it
        urls = nil
        if hash["urls"] != nil
          urls = Array.new
          hash["urls"].each{|structure| urls << UrlModel.from_hash(structure)}
        end
        modified = DateTime.iso8601(hash["modified"])
        start = DateTime.iso8601(hash["start"])
        end = DateTime.iso8601(hash["end"])
        thumbnail = Thumbnail.from_hash(hash["thumbnail"])
        comics = ComicList.from_hash(hash["comics"])
        stories = StoryList.from_hash(hash["stories"])
        series = SeriesList.from_hash(hash["series"])
        characters = CharacterList.from_hash(hash["characters"])
        creators = CreatorList.from_hash(hash["creators"])
        next = EventSummary.from_hash(hash["next"])
        previous = EventSummary.from_hash(hash["previous"])
        # Create object from extracted values
        Event.new(id,
                  title,
                  description,
                  resource_uri,
                  urls,
                  modified,
                  start,
                  end,
                  thumbnail,
                  comics,
                  stories,
                  series,
                  characters,
                  creators,
                  next,
                  previous)
      end
    end

    # Defines the key map for json serialization
    def key_map
      hash = {}
      hash['id'] = id
      hash['title'] = title
      hash['description'] = description
      hash['resourceURI'] = resource_uri
      hash['urls'] = urls.map(&:key_map)
      hash['modified'] = modified
      hash['start'] = start
      hash['end'] = end
      hash['thumbnail'] = thumbnail.key_map
      hash['comics'] = comics.key_map
      hash['stories'] = stories.key_map
      hash['series'] = series.key_map
      hash['characters'] = characters.key_map
      hash['creators'] = creators.key_map
      hash['next'] = next.key_map
      hash['previous'] = previous.key_map
      hash
    end
  end
end
