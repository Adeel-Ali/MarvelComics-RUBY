# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/27/2016

require 'date'
module MarvelComics
  class Comic

    # The unique ID of the comic resource.
    # @return [Integer]
    attr_accessor :id

    # The ID of the digital comic representation of this comic. Will be 0 if the comic is not available digitally.
    # @return [Integer]
    attr_accessor :digital_id

    # The canonical title of the comic.
    # @return [String]
    attr_accessor :title

    # The number of the issue in the series (will generally be 0 for collection formats).
    # @return [Integer]
    attr_accessor :issue_number

    # If the issue is a variant (e.g. an alternate cover, second printing, or directorâ€™s cut), a text description of the variant.
    # @return [String]
    attr_accessor :variant_description

    # The preferred description of the comic.
    # @return [String]
    attr_accessor :description

    # The date the resource was most recently modified.
    # @return [DateTime]
    attr_accessor :modified

    # The ISBN for the comic (generally only populated for collection formats).
    # @return [String]
    attr_accessor :isbn

    # The UPC barcode number for the comic (generally only populated for periodical formats).
    # @return [String]
    attr_accessor :upc

    # The Diamond code for the comic.
    # @return [String]
    attr_accessor :diamond_code

    # The EAN barcode for the comic.
    # @return [String]
    attr_accessor :ean

    # The ISSN barcode for the comic.
    # @return [String]
    attr_accessor :issn

    # The publication format of the comic e.g. comic, hardcover, trade paperback.
    # @return [String]
    attr_accessor :format

    # The number of story pages in the comic.
    # @return [Integer]
    attr_accessor :page_count

    # A set of descriptive text blurbs for the comic.
    # @return [List of TextObject]
    attr_accessor :text_objects

    # The canonical URL identifier for this resource.
    # @return [String]
    attr_accessor :resource_uri

    # A set of public web site URLs for the resource.
    # @return [List of UrlModel]
    attr_accessor :urls

    # A summary representation of the series to which this comic belongs.
    # @return [SeriesSummary]
    attr_accessor :series

    # A list of variant issues for this comic (includes the "original" issue if the current issue is a variant).
    # @return [List of ComicSummary]
    attr_accessor :variants

    # A list of collections which include this comic (will generally be empty if the comic's format is a collection).
    # @return [List of ComicSummary]
    attr_accessor :collections

    # A list of issues collected in this comic (will generally be empty for periodical formats such as "comic" or "magazine").
    # @return [List of ComicSummary]
    attr_accessor :collected_issues

    # A list of key dates for this comic.
    # @return [List of ComicDate]
    attr_accessor :dates

    # A list of prices for this comic.
    # @return [List of ComicPrice]
    attr_accessor :prices

    # The representative image for this comic.
    # @return [Thumbnail]
    attr_accessor :thumbnail

    # A list of promotional images associated with this comic.
    # @return [List of Image]
    attr_accessor :images

    # A resource list containing the creators associated with this comic.
    # @return [CreatorList]
    attr_accessor :creators

    # A resource list containing the characters which appear in this comic.
    # @return [CharacterList]
    attr_accessor :characters

    # A resource list containing the stories which appear in this comic.
    # @return [StoryList]
    attr_accessor :stories

    # A resource list containing the events in which this comic appears.
    # @return [EventList]
    attr_accessor :events

    def initialize(id = nil,
                   digital_id = nil,
                   title = nil,
                   issue_number = nil,
                   variant_description = nil,
                   description = nil,
                   modified = nil,
                   isbn = nil,
                   upc = nil,
                   diamond_code = nil,
                   ean = nil,
                   issn = nil,
                   format = nil,
                   page_count = nil,
                   text_objects = nil,
                   resource_uri = nil,
                   urls = nil,
                   series = nil,
                   variants = nil,
                   collections = nil,
                   collected_issues = nil,
                   dates = nil,
                   prices = nil,
                   thumbnail = nil,
                   images = nil,
                   creators = nil,
                   characters = nil,
                   stories = nil,
                   events = nil)
      @id = id
      @digital_id = digital_id
      @title = title
      @issue_number = issue_number
      @variant_description = variant_description
      @description = description
      @modified = modified
      @isbn = isbn
      @upc = upc
      @diamond_code = diamond_code
      @ean = ean
      @issn = issn
      @format = format
      @page_count = page_count
      @text_objects = text_objects
      @resource_uri = resource_uri
      @urls = urls
      @series = series
      @variants = variants
      @collections = collections
      @collected_issues = collected_issues
      @dates = dates
      @prices = prices
      @thumbnail = thumbnail
      @images = images
      @creators = creators
      @characters = characters
      @stories = stories
      @events = events

    end

    def method_missing(method_name)
      puts "There is no method called '#{method_name}'."
    end

    # Creates JSON of the curent object
    def to_json(options = {})
      hash = key_map
      hash.to_json(options)
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        id = hash["id"]
        digital_id = hash["digitalId"]
        title = hash["title"]
        issue_number = hash["issueNumber"]
        variant_description = hash["variantDescription"]
        description = hash["description"]
        modified = DateTime.iso8601(hash["modified"])
        isbn = hash["isbn"]
        upc = hash["upc"]
        diamond_code = hash["diamondCode"]
        ean = hash["ean"]
        issn = hash["issn"]
        format = hash["format"]
        page_count = hash["pageCount"]
        # Parameter is an array, so we need to iterate through it
        text_objects = nil
        if hash["textObjects"] != nil
          text_objects = Array.new
          hash["textObjects"].each{|structure| text_objects << TextObject.from_hash(structure)}
        end
        resource_uri = hash["resourceURI"]
        # Parameter is an array, so we need to iterate through it
        urls = nil
        if hash["urls"] != nil
          urls = Array.new
          hash["urls"].each{|structure| urls << UrlModel.from_hash(structure)}
        end
        series = SeriesSummary.from_hash(hash["series"])
        # Parameter is an array, so we need to iterate through it
        variants = nil
        if hash["variants"] != nil
          variants = Array.new
          hash["variants"].each{|structure| variants << ComicSummary.from_hash(structure)}
        end
        # Parameter is an array, so we need to iterate through it
        collections = nil
        if hash["collections"] != nil
          collections = Array.new
          hash["collections"].each{|structure| collections << ComicSummary.from_hash(structure)}
        end
        # Parameter is an array, so we need to iterate through it
        collected_issues = nil
        if hash["collectedIssues"] != nil
          collected_issues = Array.new
          hash["collectedIssues"].each{|structure| collected_issues << ComicSummary.from_hash(structure)}
        end
        # Parameter is an array, so we need to iterate through it
        dates = nil
        if hash["dates"] != nil
          dates = Array.new
          hash["dates"].each{|structure| dates << ComicDate.from_hash(structure)}
        end
        # Parameter is an array, so we need to iterate through it
        prices = nil
        if hash["prices"] != nil
          prices = Array.new
          hash["prices"].each{|structure| prices << ComicPrice.from_hash(structure)}
        end
        thumbnail = Thumbnail.from_hash(hash["thumbnail"])
        # Parameter is an array, so we need to iterate through it
        images = nil
        if hash["images"] != nil
          images = Array.new
          hash["images"].each{|structure| images << Image.from_hash(structure)}
        end
        creators = CreatorList.from_hash(hash["creators"])
        characters = CharacterList.from_hash(hash["characters"])
        stories = StoryList.from_hash(hash["stories"])
        events = EventList.from_hash(hash["events"])
        # Create object from extracted values
        Comic.new(id,
                  digital_id,
                  title,
                  issue_number,
                  variant_description,
                  description,
                  modified,
                  isbn,
                  upc,
                  diamond_code,
                  ean,
                  issn,
                  format,
                  page_count,
                  text_objects,
                  resource_uri,
                  urls,
                  series,
                  variants,
                  collections,
                  collected_issues,
                  dates,
                  prices,
                  thumbnail,
                  images,
                  creators,
                  characters,
                  stories,
                  events)
      end
    end

    # Defines the key map for json serialization
    def key_map
      hash = {}
      hash['id'] = id
      hash['digitalId'] = digital_id
      hash['title'] = title
      hash['issueNumber'] = issue_number
      hash['variantDescription'] = variant_description
      hash['description'] = description
      hash['modified'] = modified
      hash['isbn'] = isbn
      hash['upc'] = upc
      hash['diamondCode'] = diamond_code
      hash['ean'] = ean
      hash['issn'] = issn
      hash['format'] = format
      hash['pageCount'] = page_count
      hash['textObjects'] = text_objects.map(&:key_map)
      hash['resourceURI'] = resource_uri
      hash['urls'] = urls.map(&:key_map)
      hash['series'] = series.key_map
      hash['variants'] = variants.map(&:key_map)
      hash['collections'] = collections.map(&:key_map)
      hash['collectedIssues'] = collected_issues.map(&:key_map)
      hash['dates'] = dates.map(&:key_map)
      hash['prices'] = prices.map(&:key_map)
      hash['thumbnail'] = thumbnail.key_map
      hash['images'] = images.map(&:key_map)
      hash['creators'] = creators.key_map
      hash['characters'] = characters.key_map
      hash['stories'] = stories.key_map
      hash['events'] = events.key_map
      hash
    end
  end
end
