# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/27/2016

module MarvelComics
  class EventDataWrapper

    # The HTTP status code of the returned result.
    # @return [Integer]
    attr_accessor :code

    # A string description of the call status.
    # @return [String]
    attr_accessor :status

    # The copyright notice for the returned result.
    # @return [String]
    attr_accessor :copyright

    # The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.
    # @return [String]
    attr_accessor :attribution_text

    # An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API.
    # @return [String]
    attr_accessor :attribution_html

    # The results returned by the call.
    # @return [EventDataContainer]
    attr_accessor :data

    # A digest value of the content returned by the call.
    # @return [String]
    attr_accessor :etag

    def initialize(code = nil,
                   status = nil,
                   copyright = nil,
                   attribution_text = nil,
                   attribution_html = nil,
                   data = nil,
                   etag = nil)
      @code = code
      @status = status
      @copyright = copyright
      @attribution_text = attribution_text
      @attribution_html = attribution_html
      @data = data
      @etag = etag

    end

    def method_missing(method_name)
      puts "There is no method called '#{method_name}'."
    end

    # Creates JSON of the curent object
    def to_json(options = {})
      hash = key_map
      hash.to_json(options)
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        code = hash["code"]
        status = hash["status"]
        copyright = hash["copyright"]
        attribution_text = hash["attributionText"]
        attribution_html = hash["attributionHTML"]
        data = EventDataContainer.from_hash(hash["data"])
        etag = hash["etag"]
        # Create object from extracted values
        EventDataWrapper.new(code,
                             status,
                             copyright,
                             attribution_text,
                             attribution_html,
                             data,
                             etag)
      end
    end

    # Defines the key map for json serialization
    def key_map
      hash = {}
      hash['code'] = code
      hash['status'] = status
      hash['copyright'] = copyright
      hash['attributionText'] = attribution_text
      hash['attributionHTML'] = attribution_html
      hash['data'] = data.key_map
      hash['etag'] = etag
      hash
    end
  end
end
